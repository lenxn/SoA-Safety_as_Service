"this thesis emerged as a result of the internship at VV from April 2015 to .. 2015."

saftey because of the growing complexity of the hardware more and more important


service


reasons for soa

enterprise software -> initial phase of heigh productivity, after the first implementations, the ability to make more changes decreases dramatically

one reason is difficulty to make structural change to existing code.

less support after the initial phase

large number of systems with complex cross-dependencies \cite[p.2-3]{krafzig}


functional programming contributed to the service concept, because functions provide some sort of abstraction. It soon became apparent that the functional paradigm has its limits. (multipurpose reusable functions are hard to create).
increased of abstraction and encapsulation are an important step towards service orientation, but in-situ development reuse, whhile service orientation focuses on distribution and runtime reuse. \cite[p.16-17]{krafzig}

while OO imposes encapsulation of data and functionality, service-orientation often assumes that data and functionality are sparated.[p.18]


distribution
the capability to call a remote computer program from another computer program in a seeamless and controlled way is at the heart of our understanding of services. [p.19 ...]

kap.4 SoA

Software Architecture
\begin{quote}
``A software architecture is a set of statements that describe software components and assigns the functionality of the system to these components. It describes the technical structure, constraints, and characteristics of the components and the interfaces between them. The architecture is the blueprint for the system and therefore the implicit high-level plan for its construction.'' \cite[p.56]{krafzig}
\end{quote}

SOA
fig4.1 krafzig

four key abstractions: application frontend, service, service repository and service bus.

Application frontend: can be frontend with graphical UI (Web application). Do not necessaryly interact with end user.

A service is not just an encapsulation of some code but 
Service consist of serveral different parts:
contract: provides information concerning purpose, functionality, constraints and usage.
interface: exposes the functionality of the service to the client, which are connected via a network
implementation: consists of one ore more programs, configuration data and databases, which represent the required business logic to fulfill the service contract.
business logic: part of the implementation
Data:



